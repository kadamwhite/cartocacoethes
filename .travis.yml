# Travis CI (MIT License) configuration file for the Cartocacoethes WordPress theme.
# @link https://travis-ci.org/

# Ditch sudo and use containers.
# @link https://docs.travis-ci.com/user/migrating-from-legacy/#Why-migrate-to-container-based-infrastructure%3F
# @link https://docs.travis-ci.com/user/workers/container-based-infrastructure/#Routing-your-build-to-container-based-infrastructure
sudo: false
dist: trusty

# Declare project language.
# @link https://about.travis-ci.org/docs/user/languages/php/
language: php

cache:
  apt: true
  directories:
    - node_modules
    - vendor
    - $HOME/.composer/cache

env:
  global:
    - WP_TRAVISCI=travis:phpunit

# Declare versions of PHP to use. Use one decimal max.
# @link https://docs.travis-ci.com/user/build-configuration/
matrix:
  fast_finish: true

  include:
    # Run JS unit tests only on one PHP version (which does not matter).
    - php: 7.2
      env: WP_TRAVISCI=travis:js
    # Run PHP coding standards checks only on PHP 7.2.
    - php: 7.2
      env: WP_TRAVISCI=travis:phpcs
    # Run PHP unit tests against all supported PHP versions.
    # - php: 7.4snapshot
    # - php: 7.3
    - php: 7.2
    # - php: 7.1
    - php: 7.0
    - php: nightly

  allow_failures:
    - php: 7.4snapshot
    - php: nightly

# Use this to prepare the system to install prerequisites or dependencies.
# e.g. sudo apt-get update.
# Failures in this section will result in build status 'errored'.
before_install:
  # Set up Travis environment for PHP unit testing.
  - bash .bin/travisci/install-wp-tests.sh "wp_tests" "root" "" "127.0.0.1"

# Use this to prepare your build for testing.
# e.g. copy database configurations, environment variables, etc.
# Failures in this section will result in build status 'errored'.
before_script:
  # Speed up build time by disabling Xdebug.
  - phpenv config-rm xdebug.ini || echo 'No xdebug config.'
  - |
    if [[ "$WP_TRAVISCI" == "travis:js" ]]; then
      npm install;
    fi
  # Install CodeSniffer and rulesets when running PHPCS.
  - |
    if [[ "$WP_TRAVISCI" == "travis:phpcs" ]]; then
      composer --version;
      travis_retry composer install;
      phpenv rehash;
    fi
  - |
    # Export Composer's global bin dir to PATH, to enable custom PHPUnit versions.
    if [[ "$WP_TRAVISCI" == "travis:phpunit" ]]; then
      composer config --list --global
      export PATH=`composer config --list --global | grep '\[home\]' | { read a; echo "${a#* }/vendor/bin:$PATH"; }`
    fi
  # Install the specified version of PHPUnit depending on the PHP version:
  - |
    if [[ "$WP_TRAVISCI" == "travis:phpunit" ]]; then
      case "$TRAVIS_PHP_VERSION" in
        7.4snapshot|7.3|7.2|7.1|nightly)
          echo "Using PHPUnit 7.x"
          travis_retry composer global require "phpunit/phpunit:^7"
          ;;
        7.0)
          echo "Using PHPUnit 6.x"
          travis_retry composer global require "phpunit/phpunit:^6"
          ;;
        *)
          echo "No PHPUnit version handling for PHP version $TRAVIS_PHP_VERSION"
          exit 1
          ;;
      esac
    fi

# Run test script commands.
# Default is specific to project language.
# All commands must exit with code 0 on success. Anything else is considered failure.
script:
  # Search for PHP syntax errors.
  - find -L . -name '*.php' ! -path "*/vendor/*" -print0 | xargs -0 -n 1 -P 4 php -l
  # Run the theme through JavaScript Code Style checker.
  - |
    if [[ "$WP_TRAVISCI" == "travis:js" ]]; then
      $(npm bin)/eslint . .config;
    fi
  # Check PHP files against the Human Made coding standards.
  # @link https://github.com/humanmade/coding-standards
  - |
    if [[ "$WP_TRAVISCI" == "travis:phpcs" ]]; then
      vendor/bin/phpcs --runtime-set ignore_warnings_on_exit 1;
    fi
  # Run PHPUnit. Automatically uses configuration in `phpunit.xml`.
  - |
    if [[ "$WP_TRAVISCI" == "travis:phpunit" ]]; then
      phpunit;
    fi

# Receive notifications for build results.
# @link https://docs.travis-ci.com/user/notifications/#Email-notifications
notifications:
  email: false
